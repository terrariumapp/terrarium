//------------------------------------------------------------------------------
//      Copyright (c) Microsoft Corporation.  All rights reserved.                                                                
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace Terrarium.Services.Discovery {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PeerDiscoveryServiceSoap", Namespace="http://tempuri.org/")]
    public class PeerDiscoveryService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public PeerDiscoveryService() {
            this.Url = "http://lhsdkter1/Terrarium/Discovery/DiscoveryDB.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterUser(string email) {
            object[] results = this.Invoke("RegisterUser", new object[] {
                        email});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterUser(string email, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterUser", new object[] {
                        email}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRegisterUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNumPeers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNumPeers(string version, string channel) {
            object[] results = this.Invoke("GetNumPeers", new object[] {
                        version,
                        channel});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNumPeers(string version, string channel, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNumPeers", new object[] {
                        version,
                        channel}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNumPeers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePeer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidatePeer() {
            object[] results = this.Invoke("ValidatePeer", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidatePeer(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidatePeer", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndValidatePeer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterMyPeerGetCountAndPeerList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RegisterPeerResult RegisterMyPeerGetCountAndPeerList(string version, string channel, System.Guid guid, out System.Data.DataSet peers, out int count) {
            object[] results = this.Invoke("RegisterMyPeerGetCountAndPeerList", new object[] {
                        version,
                        channel,
                        guid});
            peers = ((System.Data.DataSet)(results[1]));
            count = ((int)(results[2]));
            return ((RegisterPeerResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterMyPeerGetCountAndPeerList(string version, string channel, System.Guid guid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterMyPeerGetCountAndPeerList", new object[] {
                        version,
                        channel,
                        guid}, callback, asyncState);
        }
        
        /// <remarks/>
        public RegisterPeerResult EndRegisterMyPeerGetCountAndPeerList(System.IAsyncResult asyncResult, out System.Data.DataSet peers, out int count) {
            object[] results = this.EndInvoke(asyncResult);
            peers = ((System.Data.DataSet)(results[1]));
            count = ((int)(results[2]));
            return ((RegisterPeerResult)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsVersionDisabled", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsVersionDisabled(string version, out string errorMessage) {
            object[] results = this.Invoke("IsVersionDisabled", new object[] {
                        version});
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsVersionDisabled(string version, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsVersionDisabled", new object[] {
                        version}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsVersionDisabled(System.IAsyncResult asyncResult, out string errorMessage) {
            object[] results = this.EndInvoke(asyncResult);
            errorMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RegisterPeerResult {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Failure,
        
        /// <remarks/>
        GlobalFailure,
    }
}
