//------------------------------------------------------------------------------
//      Copyright (c) Microsoft Corporation.  All rights reserved.                                                                
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.20
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.20.
// 
namespace Terrarium.Services.Usage {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UsageServiceSoap", Namespace="http://tempuri.org/")]
    public partial class UsageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ReportUsageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UsageService() {
            this.Url = Terrarium.Services.Properties.Settings.Default.Services_Usage_UsageService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ReportUsageCompletedEventHandler ReportUsageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportUsage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReportUsage(UsageData data) {
            this.Invoke("ReportUsage", new object[] {
                        data});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportUsage(UsageData data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportUsage", new object[] {
                        data}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReportUsage(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReportUsageAsync(UsageData data) {
            this.ReportUsageAsync(data, null);
        }
        
        /// <remarks/>
        public void ReportUsageAsync(UsageData data, object userState) {
            if ((this.ReportUsageOperationCompleted == null)) {
                this.ReportUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportUsageOperationCompleted);
            }
            this.InvokeAsync("ReportUsage", new object[] {
                        data}, this.ReportUsageOperationCompleted, userState);
        }
        
        private void OnReportUsageOperationCompleted(object arg) {
            if ((this.ReportUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportUsageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UsageData {
        
        /// <remarks/>
        public string Alias;
        
        /// <remarks/>
        public string Domain;
        
        /// <remarks/>
        public string GameVersion;
        
        /// <remarks/>
        public string PeerChannel;
        
        /// <remarks/>
        public int PeerCount;
        
        /// <remarks/>
        public int AnimalCount;
        
        /// <remarks/>
        public int MaxAnimalCount;
        
        /// <remarks/>
        public int WorldWidth;
        
        /// <remarks/>
        public int WorldHeight;
        
        /// <remarks/>
        public string MachineName;
        
        /// <remarks/>
        public string OSVersion;
        
        /// <remarks/>
        public int ProcessorCount;
        
        /// <remarks/>
        public string ClrVersion;
        
        /// <remarks/>
        public int WorkingSet;
        
        /// <remarks/>
        public int MaxWorkingSet;
        
        /// <remarks/>
        public int MinWorkingSet;
        
        /// <remarks/>
        public int ProcessorTimeInSeconds;
        
        /// <remarks/>
        public System.DateTime ProcessStartTime;
    }
    
    /// <remarks/>
    public delegate void ReportUsageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
