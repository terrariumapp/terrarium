//------------------------------------------------------------------------------
//      Copyright (c) Microsoft Corporation.  All rights reserved.                                                              
//------------------------------------------------------------------------------

using System;
using System.IO;
using System.Text;
using System.Xml;
using OrganismBase;

namespace Terrarium.Game
{
    /// <summary>
    ///  Exception thrown after an assembly validation has been run
    ///  using the AsmCheck component.  This exception is then used
    ///  to display an error message to the user about which code
    ///  in the assembly needs to be fixed.
    /// </summary>
    [Serializable]
    public class OrganismAssemblyFailedValidationException : GameEngineException
    {
        /// <summary>
        ///  Creates a default assembly validation failure.  No special
        ///  failure information is supplied.
        /// </summary>
        public OrganismAssemblyFailedValidationException()
            : this("Assembly failed validation process.  Please consult rules for allowed constructs.")
        {
        }

        /// <summary>
        ///  Creates an assembly validation failure given a special
        ///  message to supply to the user.
        /// </summary>
        /// <param name="message">The message to supply to the user.</param>
        public OrganismAssemblyFailedValidationException(string message) : base(message)
        {
        }

        /// <summary>
        ///  Creates an assembly validation failure object from an XML file
        ///  generated by the AsmCheck API that can be used to notify the
        ///  user of multiple validation failures.
        /// </summary>
        /// <param name="xmlFile">An XML file containing failures.</param>
        /// <returns>A customized exception based on the AsmCheck XML report.</returns>
        public static OrganismAssemblyFailedValidationException GenerateExceptionFromXml(string xmlFile)
        {
            if (!File.Exists(xmlFile))
            {
                return new OrganismAssemblyFailedValidationException();
            }

            StringBuilder sb = new StringBuilder();
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(xmlFile);

            sb.Append("Assembly failed validation process.  Please fix the following:\n\n");

            XmlNodeList xNodes = xDoc.SelectNodes("//error"); // Get all Error nodes
            foreach (XmlNode xNode in xNodes)
            {
                switch (xNode.ParentNode.LocalName)
                {
                    case "type":
                        sb.Append(
                            String.Format(
                                "{0} in {1}\n",
                                xNode.Attributes["name"].Value,
                                xNode.ParentNode.Attributes["name"].Value
                                )
                            );
                        break;
                    case "member":
                        sb.Append(
                            String.Format(
                                "{0} in {1}.{2}\n",
                                xNode.Attributes["name"].Value,
                                xNode.ParentNode.ParentNode.Attributes["name"].Value,
                                xNode.ParentNode.Attributes["name"].Value
                                )
                            );
                        break;
                    default:
                        sb.Append(
                            String.Format(
                                "An unformattable error has occurred."
                                )
                            );
                        break;
                }
            }

            xDoc = null;

            // If we can assert that the xml file being generated will be a unique
            // name then we can delete from here if the validation fails.
            if (File.Exists(xmlFile))
            {
                File.Delete(xmlFile);
            }
            return new OrganismAssemblyFailedValidationException(sb.ToString());
        }
    }
}